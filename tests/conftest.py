import pytest
from typing import Dict
import datetime
from decimal import Decimal

from bunny_order.models import (
    Position,
    Strategy,
    Contract,
    QuoteSnapshot,
    Action,
)
from bunny_order.common import Positions, Strategies, Contracts, Snapshots, TradingDates


@pytest.fixture()
def positions() -> Positions:
    data = {
        1: {
            "2836": Position(
                strategy=1,
                code="2836",
                action=Action.Buy,
                qty=3,
                cost_amt=37200.0,
                avg_prc=12.4,
                first_entry_date=datetime.date(2023, 5, 25),
                low_since_entry=12.4,
                high_since_entry=12.4,
            ),
            "2882": Position(
                strategy=1,
                code="2882",
                action=Action.Buy,
                qty=12,
                cost_amt=522000.0,
                avg_prc=43.5,
                first_entry_date=datetime.date(2023, 5, 16),
                low_since_entry=43.5,
                high_since_entry=43.5,
            ),
            "3029": Position(
                strategy=1,
                code="3029",
                action=Action.Buy,
                qty=10,
                cost_amt=615000.0,
                avg_prc=61.5,
                first_entry_date=datetime.date(2023, 5, 15),
                low_since_entry=61.5,
                high_since_entry=61.5,
            ),
            "4129": Position(
                strategy=1,
                code="4129",
                action=Action.Buy,
                qty=8,
                cost_amt=499599.9999999999,
                avg_prc=62.44999999999999,
                first_entry_date=datetime.date(2023, 5, 26),
                low_since_entry=62.5,
                high_since_entry=62.5,
            ),
            "4958": Position(
                strategy=1,
                code="4958",
                action=Action.Buy,
                qty=2,
                cost_amt=227000.0,
                avg_prc=113.5,
                first_entry_date=datetime.date(2023, 5, 22),
                low_since_entry=113.5,
                high_since_entry=113.5,
            ),
            "6112": Position(
                strategy=1,
                code="6112",
                action=Action.Buy,
                qty=10,
                cost_amt=626000.0,
                avg_prc=62.6,
                first_entry_date=datetime.date(2023, 5, 15),
                low_since_entry=62.6,
                high_since_entry=62.6,
            ),
        },
        2: {
            "8048": Position(
                strategy=2,
                code="8048",
                action=Action.Buy,
                qty=3,
                cost_amt=148350.00000000003,
                avg_prc=49.45000000000001,
                first_entry_date=datetime.date(2023, 5, 18),
                low_since_entry=49.45,
                high_since_entry=49.45,
            ),
            "8446": Position(
                strategy=2,
                code="8446",
                action=Action.Buy,
                qty=2,
                cost_amt=228500.0,
                avg_prc=114.25,
                first_entry_date=datetime.date(2023, 5, 18),
                low_since_entry=114.25,
                high_since_entry=114.25,
            ),
        },
        6: {
            "5243": Position(
                strategy=6,
                code="5243",
                action=Action.Buy,
                qty=3,
                cost_amt=239399.99999999997,
                avg_prc=79.8,
                first_entry_date=datetime.date(2023, 5, 22),
                low_since_entry=79.8,
                high_since_entry=79.8,
            )
        },
    }
    positions = Positions()
    positions.update(data)
    return positions


@pytest.fixture()
def strategies() -> Strategies:
    data = {
        2: Strategy(
            id=2,
            name="注意股10日多",
            add_date=datetime.date(2023, 5, 5),
            status=True,
            leverage_ratio=0.34,
            expected_mdd=71.5,
            expected_daily_return=32.6,
            holding_period=10,
            order_low_ratio=-2.35,
            exit_stop_loss=None,
            exit_take_profit=None,
            exit_dp_days=None,
            exit_dp_profit_limit=None,
            enable_raise=False,
            enable_dividend=False,
        ),
        3: Strategy(
            id=3,
            name="處置股10日多",
            add_date=datetime.date(2023, 5, 5),
            status=True,
            leverage_ratio=0.4,
            expected_mdd=59.06,
            expected_daily_return=60.12,
            holding_period=10,
            order_low_ratio=-1.94,
            exit_stop_loss=None,
            exit_take_profit=None,
            exit_dp_days=None,
            exit_dp_profit_limit=None,
            enable_raise=False,
            enable_dividend=False,
        ),
        4: Strategy(
            id=4,
            name="開高動能強飆股_1",
            add_date=datetime.date(2023, 5, 5),
            status=True,
            leverage_ratio=0.18,
            expected_mdd=73.43,
            expected_daily_return=23.82,
            holding_period=10,
            order_low_ratio=-2.3,
            exit_stop_loss=None,
            exit_take_profit=None,
            exit_dp_days=None,
            exit_dp_profit_limit=None,
            enable_raise=False,
            enable_dividend=False,
        ),
        5: Strategy(
            id=5,
            name="營收首次創新高",
            add_date=datetime.date(2023, 5, 5),
            status=True,
            leverage_ratio=0.17,
            expected_mdd=99.04,
            expected_daily_return=-11.21,
            holding_period=20,
            order_low_ratio=-0.87,
            exit_stop_loss=None,
            exit_take_profit=None,
            exit_dp_days=None,
            exit_dp_profit_limit=None,
            enable_raise=False,
            enable_dividend=False,
        ),
        6: Strategy(
            id=6,
            name="籌碼雷達5日多",
            add_date=datetime.date(2023, 5, 5),
            status=True,
            leverage_ratio=0.57,
            expected_mdd=55.96,
            expected_daily_return=-18.86,
            holding_period=5,
            order_low_ratio=-0.52,
            exit_stop_loss=None,
            exit_take_profit=None,
            exit_dp_days=None,
            exit_dp_profit_limit=None,
            enable_raise=False,
            enable_dividend=False,
        ),
        7: Strategy(
            id=7,
            name="Undefined",
            add_date=datetime.date(2023, 5, 22),
            status=False,
            leverage_ratio=1.0,
            expected_mdd=None,
            expected_daily_return=None,
            holding_period=0,
            order_low_ratio=None,
            exit_stop_loss=None,
            exit_take_profit=None,
            exit_dp_days=None,
            exit_dp_profit_limit=None,
            enable_raise=False,
            enable_dividend=False,
        ),
        1: Strategy(
            id=1,
            name="法說會前主力蠢蠢欲動",
            add_date=datetime.date(2023, 5, 5),
            status=True,
            leverage_ratio=0.64,
            expected_mdd=54.0,
            expected_daily_return=18.74,
            holding_period=10,
            order_low_ratio=-0.8,
            exit_stop_loss=None,
            exit_take_profit=None,
            exit_dp_days=None,
            exit_dp_profit_limit=None,
            enable_raise=False,
            enable_dividend=False,
        ),
    }
    strategies = Strategies()
    strategies.update(data)
    return strategies


@pytest.fixture()
def contracts() -> Contracts:
    data = {
        "3029": Contract(
            code="3029",
            name="零壹",
            reference=Decimal("64.2"),
            limit_up=Decimal("70.6"),
            limit_down=Decimal("57.8"),
            day_trade=True,
        ),
        "5243": Contract(
            code="5243",
            name="乙盛-KY",
            reference=Decimal("86.8"),
            limit_up=Decimal("95.4"),
            limit_down=Decimal("78.2"),
            day_trade=True,
        ),
        "6112": Contract(
            code="6112",
            name="邁達特",
            reference=Decimal("72.1"),
            limit_up=Decimal("79.3"),
            limit_down=Decimal("64.9"),
            day_trade=True,
        ),
        "2882": Contract(
            code="2882",
            name="國泰金",
            reference=Decimal("44.05"),
            limit_up=Decimal("48.45"),
            limit_down=Decimal("39.65"),
            day_trade=True,
        ),
        "2836": Contract(
            code="2836",
            name="高雄銀",
            reference=Decimal("12.4"),
            limit_up=Decimal("13.6"),
            limit_down=Decimal("11.2"),
            day_trade=True,
        ),
        "4958": Contract(
            code="4958",
            name="臻鼎-KY",
            reference=Decimal("113.5"),
            limit_up=Decimal("124.5"),
            limit_down=Decimal("102.5"),
            day_trade=True,
        ),
        "8446": Contract(
            code="8446",
            name="華研",
            reference=Decimal("109.5"),
            limit_up=Decimal("120.0"),
            limit_down=Decimal("98.6"),
            day_trade=True,
        ),
        "4129": Contract(
            code="4129",
            name="聯合",
            reference=Decimal("62.8"),
            limit_up=Decimal("69.0"),
            limit_down=Decimal("56.6"),
            day_trade=True,
        ),
        "8048": Contract(
            code="8048",
            name="德勝",
            reference=Decimal("50.5"),
            limit_up=Decimal("55.5"),
            limit_down=Decimal("45.45"),
            day_trade=True,
        ),
    }
    contracts = Contracts()
    contracts.update(data)
    return contracts


@pytest.fixture()
def snapshots() -> Snapshots:
    data = {
        "2836": QuoteSnapshot(
            dt=datetime.datetime(2023, 5, 26, 14, 30),
            code="2836",
            open=12.3,
            high=12.4,
            low=12.3,
            close=12.35,
            volume=4,
            total_volume=269,
            amount=49400,
            total_amount=3325968,
            buy_price=12.35,
            buy_volume=20,
            sell_price=12.4,
            sell_volume=34,
        ),
        "2882": QuoteSnapshot(
            dt=datetime.datetime(2023, 5, 26, 14, 30),
            code="2882",
            open=43.9,
            high=44.25,
            low=43.75,
            close=43.9,
            volume=18,
            total_volume=20704,
            amount=790200,
            total_amount=911183721,
            buy_price=43.9,
            buy_volume=741,
            sell_price=44.0,
            sell_volume=18,
        ),
        "3029": QuoteSnapshot(
            dt=datetime.datetime(2023, 5, 26, 14, 30),
            code="3029",
            open=65.7,
            high=67.9,
            low=64.3,
            close=65.6,
            volume=33,
            total_volume=20257,
            amount=2164800,
            total_amount=1339882248,
            buy_price=65.6,
            buy_volume=10,
            sell_price=65.7,
            sell_volume=10,
        ),
        "4129": QuoteSnapshot(
            dt=datetime.datetime(2023, 5, 26, 14, 30),
            code="4129",
            open=62.5,
            high=62.9,
            low=60.3,
            close=60.5,
            volume=2,
            total_volume=2206,
            amount=121000,
            total_amount=135448712,
            buy_price=60.5,
            buy_volume=3,
            sell_price=60.6,
            sell_volume=2,
        ),
        "4958": QuoteSnapshot(
            dt=datetime.datetime(2023, 5, 26, 14, 30),
            code="4958",
            open=114.0,
            high=114.5,
            low=113.0,
            close=114.0,
            volume=4,
            total_volume=2535,
            amount=456000,
            total_amount=288500405,
            buy_price=113.5,
            buy_volume=81,
            sell_price=114.0,
            sell_volume=24,
        ),
        "5243": QuoteSnapshot(
            dt=datetime.datetime(2023, 5, 26, 14, 30),
            code="5243",
            open=86.5,
            high=87.8,
            low=82.3,
            close=82.6,
            volume=47,
            total_volume=13110,
            amount=3882200,
            total_amount=1102225479,
            buy_price=82.6,
            buy_volume=25,
            sell_price=82.7,
            sell_volume=65,
        ),
        "6112": QuoteSnapshot(
            dt=datetime.datetime(2023, 5, 26, 14, 30),
            code="6112",
            open=73.5,
            high=74.7,
            low=69.0,
            close=70.0,
            volume=16,
            total_volume=11343,
            amount=1120000,
            total_amount=810981901,
            buy_price=69.9,
            buy_volume=3,
            sell_price=70.0,
            sell_volume=24,
        ),
        "8048": QuoteSnapshot(
            dt=datetime.datetime(2023, 5, 26, 14, 30),
            code="8048",
            open=51.1,
            high=55.5,
            low=50.0,
            close=55.5,
            volume=42,
            total_volume=2238,
            amount=2331000,
            total_amount=118086631,
            buy_price=55.1,
            buy_volume=3,
            sell_price=55.5,
            sell_volume=90,
        ),
        "8446": QuoteSnapshot(
            dt=datetime.datetime(2023, 5, 26, 14, 30),
            code="8446",
            open=110.5,
            high=113.0,
            low=109.0,
            close=109.0,
            volume=6,
            total_volume=1259,
            amount=654000,
            total_amount=139464786,
            buy_price=109.0,
            buy_volume=44,
            sell_price=109.5,
            sell_volume=4,
        ),
    }

    snapshots = Snapshots()
    snapshots.update(data)
    return snapshots


@pytest.fixture()
def trading_dates() -> TradingDates:
    data = [
        datetime.date(2023, 5, 23),
        datetime.date(2023, 5, 24),
        datetime.date(2023, 5, 25),
        datetime.date(2023, 5, 26),
        datetime.date(2023, 5, 29),
        datetime.date(2023, 5, 30),
        datetime.date(2023, 5, 31),
        datetime.date(2023, 6, 1),
        datetime.date(2023, 6, 2),
        datetime.date(2023, 6, 5),
        datetime.date(2023, 6, 6),
        datetime.date(2023, 6, 7),
        datetime.date(2023, 6, 8),
        datetime.date(2023, 6, 9),
        datetime.date(2023, 6, 12),
        datetime.date(2023, 6, 13),
        datetime.date(2023, 6, 14),
        datetime.date(2023, 6, 15),
        datetime.date(2023, 6, 16),
        datetime.date(2023, 6, 19),
        datetime.date(2023, 6, 20),
        datetime.date(2023, 6, 21),
        datetime.date(2023, 6, 26),
        datetime.date(2023, 6, 27),
        datetime.date(2023, 6, 28),
        datetime.date(2023, 6, 29),
        datetime.date(2023, 6, 30),
        datetime.date(2023, 7, 3),
        datetime.date(2023, 7, 4),
        datetime.date(2023, 7, 5),
    ]

    trading_dates = TradingDates()
    trading_dates.update(data)
    return trading_dates
